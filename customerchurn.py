# -*- coding: utf-8 -*-
"""CustomerChurn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BesKljFsQ77AtS5S6b9hPjoJqmweutEl

Imports
"""

#Importing libraries
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from math import * # module math
import matplotlib.pyplot as plt # visualization
from PIL import Image
import seaborn as sns # visualization
import itertools
import io
import plotly.offline as py # visualization
py.init_notebook_mode(connected=True) # visualization
import plotly.graph_objs as go # visualization
from plotly.subplots import make_subplots
import plotly.figure_factory as ff # visualization
import warnings
warnings.filterwarnings("ignore")

"""Load Dataset from Kaggle"""

!pip install kaggle

!rm -rf /root/.kaggle

!mkdir /root/.kaggle

!cp kaggle.json /root/.kaggle/

! chmod 600 /root/.kaggle/kaggle.json

!kaggle datasets download -d blastchar/telco-customer-churn

!unzip -o /content/telco-customer-churn.zip

df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')

df.head(20)

df_id = pd.DataFrame(enumerate(df['customerID'].unique())).rename({0: 'id', 1: 'idNo'}, axis=1)

df2 =pd.concat([df, df_id], axis=1)

df2.head(10)

"""Preprocessing Data"""

df2.isnull().sum()

df2['TotalCharges']= df2['TotalCharges'].replace(' ',0)

df2.nunique()

#Select Relevant Columns
col_to_drop = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection','TechSupport','StreamingTV',
               'StreamingMovies','Contract','PaperlessBilling','customerID', 'idNo']

df2 = df2.drop(columns=col_to_drop, axis = 1)

df2.head(489)

#Separate Features and labels
X = df2.drop(columns = 'Churn',axis=1)
y = df2['Churn']

#Label Encoding
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

le = LabelEncoder()
X['gender'] = le.fit_transform(X['gender'])
X['Partner'] = le.fit_transform(X['Partner'])
X['Dependents'] = le.fit_transform(X['Dependents'])
X['PhoneService'] = le.fit_transform(X['PhoneService'])
X['MultipleLines'] = le.fit_transform(X['MultipleLines'])
X['InternetService'] = le.fit_transform(X['InternetService'])
X['PaymentMethod'] = le.fit_transform(X['PaymentMethod'])
X['TotalCharges'] = pd.to_numeric(X['TotalCharges'])
y = le.fit_transform(y)

#Split training and testing data
from sklearn.model_selection import train_test_split as tst

X_train, X_test, y_train, y_test = tst(X, y, test_size = 0.2, random_state = 42)
print(X_train.shape)
print(X_test.shape)

X_train.dtypes

"""Model Building"""

import plotly.io as pio
pio.renderers.default = 'colab'

trace = go.Pie(labels = df2["Churn"].value_counts().keys().tolist(),
               values = df2["Churn"].value_counts().values.tolist(),
               marker = dict(colors = ['royalblue','lime'],
                             line = dict(color = "white", width =  1.3)
                            ),
               rotation = 90,
               hoverinfo = "label+value+text",
               hole = .5
              )
layout = go.Layout(dict(title = "Customer churn in training data",
                        plot_bgcolor = "rgb(243,243,243)",
                        paper_bgcolor = "rgb(243,243,243)",
                       )
                  )
data = [trace]
fig = go.Figure(data = data, layout = layout)
py.iplot(fig)

from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()

lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)
print("Accuracy Score:", accuracy_score(y_test, y_pred))